// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  discordId     String?   @unique
  verified      Boolean?
  emailVerified DateTime?
  name          String?
  email         String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model InternalUser {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  discordId    String?       @unique
  name         String?
  ageVerified  Boolean?
  apiKey       ApiKey?
  photos       Photo[]
  collections  Collection[]
  tokens       Int           @default(25)
  role         Role          @default(USER)
  interactions Interaction[]
}

model Photo {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  creatorId    String        @db.ObjectId
  user         InternalUser  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  collectionId String?       @db.ObjectId
  collection   Collection?   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  url          String        @unique
  nsfw         Boolean?
  prompt       String
  tags         String[]
  interactions Interaction[]
  likes        Int           @default(0)
}

model Collection {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  creatorId String       @db.ObjectId
  name      String
  tags      String[]
  likes     Int?
  photos    Photo[]
  user      InternalUser @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  ownerId    String        @unique @db.ObjectId
  createdAt  DateTime      @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  hashedKey  String        @unique()
  user       InternalUser? @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Interaction {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  userId    String          @db.ObjectId
  photoId   String          @db.ObjectId
  type      InteractionType
  photo     Photo           @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      InternalUser    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportRequests {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name      String
  emailId   String
  concern   String
}

enum Role {
  ADMIN
  USER
}

enum InteractionType {
  LIKE
  UNLIKE
}
